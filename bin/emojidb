#!/usr/bin/env node

const emojiVersion = '12.0';

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const formators = require('../lib/formators');
const arrFormators = Object.keys(formators);

const argv = require('yargs')
  .help('h')
  .alias('h', 'help')
  .alias('v', 'version')
  .option('f', {
    alias: 'file',
    default: 'emojidb_result',
    describe: 'File name'
  })
  .option('t', {
    alias: 'type',
    default: 'json',
    describe: 'Output format',
    choices: arrFormators
  })
  .usage('Usage: emojidb [-t type] [-f file]')
  .example('emojidb -t xml -f ~/yahaha')
  .example('# You will get a file named "yahaha.xml" in user folder.')
  .epilog('copyright (C) 2019 phpz.xyz')
  .argv;

const source = path.join(__dirname, '../source/emoji-test.txt');
const output = `${argv.file}.${argv.type}`;
const stream = fs.createReadStream(source);
const rl = readline.createInterface({input: stream});

let data = { version: emojiVersion, emojis: [] };

stream.on('open', _ => {
  // console.log('BEGIN!');
});

stream.on('close', _ => {
  fs.writeFile(
    output,
    new formators[argv.type](data).output,
    err => {
      if (err) {
        console.error("⚠️ ", err.message);
      } else {
        console.log(`✌️  Please run \`open "${output}"\` to check the output.`);
      }
    });
});

let curGroup = null;
let curSubgroup = null;

rl.on('line', line => {
  if (line.charAt(0) == '#') {
    let group = /#\s+group:\s+(.+)/.exec(line);
    let subgroup = /#\s+subgroup:\s+(.+)/.exec(line);
    // group
    if (group) {
      curGroup = group[1];
    }
    // subgroup
    if (subgroup) {
      curSubgroup = subgroup[1];
    }
  } else {
    // emoji
    // # Format: code points; status # emoji name
    //           [1]          [2]      [3]   [4]

    let emojiInfo = /^([\w\s]+?)\s+;\s+([\w\-]+)\s+\#\s+(\S+)\s+(.+)/.exec(line);

    emojiInfo && data.emojis.push({
      group: curGroup,
      subgroup: curSubgroup,
      codepoints: emojiInfo[1].replace(/\s+/g, ','),
      status: emojiInfo[2],
      emoji: emojiInfo[3],
      name: emojiInfo[4],
      keywords: getKeyWords(curGroup, curSubgroup, emojiInfo[4])
    });
  }
});

function getKeyWords(group, subgroup, name) {
  const separator = /[\s\&\-]+/;
  let keywords = [];

  name = name.replace(/[\(\)]/g, '');

  keywords = keywords.concat(group.toLowerCase().split(separator));
  keywords = keywords.concat(subgroup.toLowerCase().split(separator));
  keywords = keywords.concat(name.toLowerCase().split(separator));

  return Array.from(new Set(keywords)).join();
}
